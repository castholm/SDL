// © 2024 Carl Åstholm
// SPDX-License-Identifier: MIT

const std = @import("std");

const version: std.SemanticVersion = .{ .major = 3, .minor = 1, .patch = 6 };

pub fn build(b: *std.Build) void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});
    const link_mode = b.option(
        std.builtin.LinkMode,
        "link_mode",
        "Build SDL as a statically or dynamically linked library",
    ) orelse .dynamic;
    const install_build_config_h = b.option(
        bool,
        "install_build_config_h",
        "Additionally install 'SDL_build_config.h' when installing SDL (for debugging)",
    ) orelse false;

    var windows = false;
    switch (target.result.os.tag) {
        .windows => {
            windows = true;
        },
        else => {},
    }

    const build_config_h: *std.Build.Step.ConfigHeader = build_config_h: {
        const cpu = target.result.cpu;
        const x86 = cpu.arch.isX86();
        const arm = if (@hasDecl(@TypeOf(cpu.arch), "isArm")) cpu.arch.isArm() else cpu.arch.isArmOrThumb(); // Zig 0.13.0 compat
        const aarch64 = cpu.arch.isAARCH64();
        const loongarch = cpu.arch == .loongarch32 or cpu.arch == .loongarch64;
        break :build_config_h b.addConfigHeader(.{
            .style = .{ .cmake = b.path("include/build_config/SDL_build_config.h.cmake") },
            .include_path = "SDL_build_config.h",
        }, .{
            .HAVE_GCC_ATOMICS = windows,
            .HAVE_GCC_SYNC_LOCK_TEST_AND_SET = false,
            .SDL_DISABLE_ALLOCA = false,
            .HAVE_LIBC = windows,
            .HAVE_ALLOCA_H = false,
            .HAVE_FLOAT_H = windows,
            .HAVE_ICONV_H = false,
            .HAVE_INTTYPES_H = windows,
            .HAVE_LIMITS_H = windows,
            .HAVE_MALLOC_H = windows,
            .HAVE_MATH_H = windows,
            .HAVE_MEMORY_H = windows,
            .HAVE_SIGNAL_H = windows,
            .HAVE_STDARG_H = windows,
            .HAVE_STDBOOL_H = windows,
            .HAVE_STDDEF_H = windows,
            .HAVE_STDINT_H = windows,
            .HAVE_STDIO_H = windows,
            .HAVE_STDLIB_H = windows,
            .HAVE_STRINGS_H = windows,
            .HAVE_STRING_H = windows,
            .HAVE_SYS_TYPES_H = windows,
            .HAVE_WCHAR_H = windows,
            .HAVE_PTHREAD_NP_H = false,
            .HAVE_DLOPEN = false,
            .HAVE_MALLOC = windows,
            .HAVE_CALLOC = windows,
            .HAVE_REALLOC = windows,
            .HAVE_FDATASYNC = false,
            .HAVE_FREE = windows,
            .HAVE_GETENV = windows,
            .HAVE_GETHOSTNAME = false,
            .HAVE_SETENV = false,
            .HAVE_PUTENV = windows,
            .HAVE_UNSETENV = false,
            .HAVE_ABS = windows,
            .HAVE_BCOPY = false,
            .HAVE_MEMSET = windows,
            .HAVE_MEMCPY = windows,
            .HAVE_MEMMOVE = windows,
            .HAVE_MEMCMP = windows,
            .HAVE_WCSLEN = windows,
            .HAVE_WCSNLEN = windows,
            .HAVE_WCSLCPY = false,
            .HAVE_WCSLCAT = false,
            .HAVE__WCSDUP = windows,
            .HAVE_WCSDUP = windows,
            .HAVE_WCSSTR = windows,
            .HAVE_WCSCMP = windows,
            .HAVE_WCSNCMP = windows,
            .HAVE_WCSTOL = windows,
            .HAVE_STRLEN = windows,
            .HAVE_STRNLEN = windows,
            .HAVE_STRLCPY = false,
            .HAVE_STRLCAT = false,
            .HAVE_STRPBRK = windows,
            .HAVE__STRREV = windows,
            .HAVE__STRUPR = false,
            .HAVE__STRLWR = false,
            .HAVE_INDEX = false,
            .HAVE_RINDEX = false,
            .HAVE_STRCHR = windows,
            .HAVE_STRRCHR = windows,
            .HAVE_STRSTR = windows,
            .HAVE_STRNSTR = false,
            .HAVE_STRTOK_R = windows,
            .HAVE_ITOA = windows,
            .HAVE__LTOA = windows,
            .HAVE__UITOA = false,
            .HAVE__ULTOA = windows,
            .HAVE_STRTOL = windows,
            .HAVE_STRTOUL = windows,
            .HAVE__I64TOA = windows,
            .HAVE__UI64TOA = windows,
            .HAVE_STRTOLL = windows,
            .HAVE_STRTOULL = windows,
            .HAVE_STRTOD = windows,
            .HAVE_ATOI = windows,
            .HAVE_ATOF = windows,
            .HAVE_STRCMP = windows,
            .HAVE_STRNCMP = windows,
            .HAVE_STRCASESTR = false,
            .HAVE_SSCANF = windows,
            .HAVE_VSSCANF = windows,
            .HAVE_VSNPRINTF = windows,
            .HAVE_ACOS = windows,
            .HAVE_ACOSF = windows,
            .HAVE_ASIN = windows,
            .HAVE_ASINF = windows,
            .HAVE_ATAN = windows,
            .HAVE_ATANF = windows,
            .HAVE_ATAN2 = windows,
            .HAVE_ATAN2F = windows,
            .HAVE_CEIL = windows,
            .HAVE_CEILF = windows,
            .HAVE_COPYSIGN = windows,
            .HAVE_COPYSIGNF = windows,
            .HAVE_COS = windows,
            .HAVE_COSF = windows,
            .HAVE_EXP = windows,
            .HAVE_EXPF = windows,
            .HAVE_FABS = windows,
            .HAVE_FABSF = windows,
            .HAVE_FLOOR = windows,
            .HAVE_FLOORF = windows,
            .HAVE_FMOD = windows,
            .HAVE_FMODF = windows,
            .HAVE_ISINF = windows,
            .HAVE_ISINFF = false,
            .HAVE_ISINF_FLOAT_MACRO = windows,
            .HAVE_ISNAN = windows,
            .HAVE_ISNANF = false,
            .HAVE_ISNAN_FLOAT_MACRO = windows,
            .HAVE_LOG = windows,
            .HAVE_LOGF = windows,
            .HAVE_LOG10 = windows,
            .HAVE_LOG10F = windows,
            .HAVE_LROUND = windows,
            .HAVE_LROUNDF = windows,
            .HAVE_MODF = windows,
            .HAVE_MODFF = windows,
            .HAVE_POW = windows,
            .HAVE_POWF = windows,
            .HAVE_ROUND = windows,
            .HAVE_ROUNDF = windows,
            .HAVE_SCALBN = windows,
            .HAVE_SCALBNF = windows,
            .HAVE_SIN = windows,
            .HAVE_SINF = windows,
            .HAVE_SQRT = windows,
            .HAVE_SQRTF = windows,
            .HAVE_TAN = windows,
            .HAVE_TANF = windows,
            .HAVE_TRUNC = windows,
            .HAVE_TRUNCF = windows,
            .HAVE_FOPEN64 = windows,
            .HAVE_FSEEKO = windows,
            .HAVE_FSEEKO64 = windows,
            .HAVE_MEMFD_CREATE = false,
            .HAVE_POSIX_FALLOCATE = false,
            .HAVE_SIGACTION = false,
            .HAVE_SA_SIGACTION = false,
            .HAVE_ST_MTIM = false,
            .HAVE_SETJMP = false,
            .HAVE_NANOSLEEP = false,
            .HAVE_GMTIME_R = false,
            .HAVE_LOCALTIME_R = false,
            .HAVE_NL_LANGINFO = false,
            .HAVE_SYSCONF = false,
            .HAVE_SYSCTLBYNAME = false,
            .HAVE_CLOCK_GETTIME = false,
            .HAVE_GETPAGESIZE = false,
            .HAVE_ICONV = false,
            .SDL_USE_LIBICONV = false,
            .HAVE_PTHREAD_SETNAME_NP = false,
            .HAVE_PTHREAD_SET_NAME_NP = false,
            .HAVE_SEM_TIMEDWAIT = false,
            .HAVE_GETAUXVAL = false,
            .HAVE_ELF_AUX_INFO = false,
            .HAVE_POLL = false,
            .HAVE__EXIT = windows,
            .HAVE_DBUS_DBUS_H = false,
            .HAVE_FCITX = false,
            .HAVE_IBUS_IBUS_H = false,
            .HAVE_SYS_INOTIFY_H = false,
            .HAVE_INOTIFY_INIT = false,
            .HAVE_INOTIFY_INIT1 = false,
            .HAVE_INOTIFY = false,
            .HAVE_LIBUSB = false,
            .HAVE_O_CLOEXEC = false,
            .HAVE_LINUX_INPUT_H = false,
            .HAVE_LIBUDEV_H = false,
            .HAVE_LIBDECOR_H = false,
            .HAVE_D3D11_H = windows,
            .HAVE_DDRAW_H = windows,
            .HAVE_DSOUND_H = windows,
            .HAVE_DINPUT_H = windows,
            .HAVE_XINPUT_H = windows,
            .HAVE_WINDOWS_GAMING_INPUT_H = windows,
            .HAVE_GAMEINPUT_H = false,
            .HAVE_DXGI_H = windows,
            .HAVE_DXGI1_6_H = windows,
            .HAVE_MMDEVICEAPI_H = windows,
            .HAVE_AUDIOCLIENT_H = windows,
            .HAVE_TPCSHRD_H = windows,
            .HAVE_SENSORSAPI_H = windows,
            .HAVE_ROAPI_H = windows,
            .HAVE_SHELLSCALINGAPI_H = windows,
            .USE_POSIX_SPAWN = false,
            .SDL_DEFAULT_ASSERT_LEVEL_CONFIGURED = false,
            .SDL_DEFAULT_ASSERT_LEVEL = null,
            .SDL_AUDIO_DISABLED = false,
            .SDL_JOYSTICK_DISABLED = false,
            .SDL_HAPTIC_DISABLED = false,
            .SDL_HIDAPI_DISABLED = false,
            .SDL_SENSOR_DISABLED = false,
            .SDL_RENDER_DISABLED = false,
            .SDL_THREADS_DISABLED = false,
            .SDL_VIDEO_DISABLED = false,
            .SDL_POWER_DISABLED = false,
            .SDL_CAMERA_DISABLED = false,
            .SDL_GPU_DISABLED = false,
            .SDL_AUDIO_DRIVER_ALSA = false,
            .SDL_AUDIO_DRIVER_ALSA_DYNAMIC = "",
            .SDL_AUDIO_DRIVER_OPENSLES = false,
            .SDL_AUDIO_DRIVER_AAUDIO = false,
            .SDL_AUDIO_DRIVER_COREAUDIO = false,
            .SDL_AUDIO_DRIVER_DISK = windows,
            .SDL_AUDIO_DRIVER_DSOUND = windows,
            .SDL_AUDIO_DRIVER_DUMMY = windows,
            .SDL_AUDIO_DRIVER_EMSCRIPTEN = false,
            .SDL_AUDIO_DRIVER_HAIKU = false,
            .SDL_AUDIO_DRIVER_JACK = false,
            .SDL_AUDIO_DRIVER_JACK_DYNAMIC = "",
            .SDL_AUDIO_DRIVER_NETBSD = false,
            .SDL_AUDIO_DRIVER_OSS = false,
            .SDL_AUDIO_DRIVER_PIPEWIRE = false,
            .SDL_AUDIO_DRIVER_PIPEWIRE_DYNAMIC = "",
            .SDL_AUDIO_DRIVER_PULSEAUDIO = false,
            .SDL_AUDIO_DRIVER_PULSEAUDIO_DYNAMIC = "",
            .SDL_AUDIO_DRIVER_SNDIO = false,
            .SDL_AUDIO_DRIVER_SNDIO_DYNAMIC = "",
            .SDL_AUDIO_DRIVER_WASAPI = windows,
            .SDL_AUDIO_DRIVER_VITA = false,
            .SDL_AUDIO_DRIVER_PSP = false,
            .SDL_AUDIO_DRIVER_PS2 = false,
            .SDL_AUDIO_DRIVER_N3DS = false,
            .SDL_AUDIO_DRIVER_QNX = false,
            .SDL_INPUT_LINUXEV = false,
            .SDL_INPUT_LINUXKD = false,
            .SDL_INPUT_FBSDKBIO = false,
            .SDL_INPUT_WSCONS = false,
            .SDL_HAVE_MACHINE_JOYSTICK_H = false,
            .SDL_JOYSTICK_ANDROID = false,
            .SDL_JOYSTICK_DINPUT = windows,
            .SDL_JOYSTICK_DUMMY = false,
            .SDL_JOYSTICK_EMSCRIPTEN = false,
            .SDL_JOYSTICK_GAMEINPUT = false,
            .SDL_JOYSTICK_HAIKU = false,
            .SDL_JOYSTICK_HIDAPI = windows,
            .SDL_JOYSTICK_IOKIT = false,
            .SDL_JOYSTICK_LINUX = false,
            .SDL_JOYSTICK_MFI = false,
            .SDL_JOYSTICK_N3DS = false,
            .SDL_JOYSTICK_PS2 = false,
            .SDL_JOYSTICK_PSP = false,
            .SDL_JOYSTICK_RAWINPUT = windows,
            .SDL_JOYSTICK_USBHID = false,
            .SDL_JOYSTICK_VIRTUAL = windows,
            .SDL_JOYSTICK_VITA = false,
            .SDL_JOYSTICK_WGI = windows,
            .SDL_JOYSTICK_XINPUT = windows,
            .SDL_HAPTIC_DUMMY = false,
            .SDL_HAPTIC_LINUX = false,
            .SDL_HAPTIC_IOKIT = false,
            .SDL_HAPTIC_DINPUT = windows,
            .SDL_HAPTIC_ANDROID = false,
            .SDL_LIBUSB_DYNAMIC = "",
            .SDL_UDEV_DYNAMIC = "",
            .SDL_PROCESS_DUMMY = false,
            .SDL_PROCESS_POSIX = false,
            .SDL_PROCESS_WINDOWS = windows,
            .SDL_SENSOR_ANDROID = false,
            .SDL_SENSOR_COREMOTION = false,
            .SDL_SENSOR_WINDOWS = windows,
            .SDL_SENSOR_DUMMY = false,
            .SDL_SENSOR_VITA = false,
            .SDL_SENSOR_N3DS = false,
            .SDL_LOADSO_DLOPEN = false,
            .SDL_LOADSO_DUMMY = false,
            .SDL_LOADSO_LDG = false,
            .SDL_LOADSO_WINDOWS = windows,
            .SDL_THREAD_GENERIC_COND_SUFFIX = windows,
            .SDL_THREAD_GENERIC_RWLOCK_SUFFIX = windows,
            .SDL_THREAD_PTHREAD = false,
            .SDL_THREAD_PTHREAD_RECURSIVE_MUTEX = false,
            .SDL_THREAD_PTHREAD_RECURSIVE_MUTEX_NP = false,
            .SDL_THREAD_WINDOWS = windows,
            .SDL_THREAD_VITA = false,
            .SDL_THREAD_PSP = false,
            .SDL_THREAD_PS2 = false,
            .SDL_THREAD_N3DS = false,
            .SDL_TIME_UNIX = false,
            .SDL_TIME_WINDOWS = windows,
            .SDL_TIME_VITA = false,
            .SDL_TIME_PSP = false,
            .SDL_TIME_PS2 = false,
            .SDL_TIME_N3DS = false,
            .SDL_TIMER_HAIKU = false,
            .SDL_TIMER_DUMMY = false,
            .SDL_TIMER_UNIX = false,
            .SDL_TIMER_WINDOWS = windows,
            .SDL_TIMER_VITA = false,
            .SDL_TIMER_PSP = false,
            .SDL_TIMER_PS2 = false,
            .SDL_TIMER_N3DS = false,
            .SDL_VIDEO_DRIVER_ANDROID = false,
            .SDL_VIDEO_DRIVER_COCOA = false,
            .SDL_VIDEO_DRIVER_DUMMY = windows,
            .SDL_VIDEO_DRIVER_EMSCRIPTEN = false,
            .SDL_VIDEO_DRIVER_HAIKU = false,
            .SDL_VIDEO_DRIVER_KMSDRM = false,
            .SDL_VIDEO_DRIVER_KMSDRM_DYNAMIC = "",
            .SDL_VIDEO_DRIVER_KMSDRM_DYNAMIC_GBM = "",
            .SDL_VIDEO_DRIVER_N3DS = false,
            .SDL_VIDEO_DRIVER_OFFSCREEN = windows,
            .SDL_VIDEO_DRIVER_PS2 = false,
            .SDL_VIDEO_DRIVER_PSP = false,
            .SDL_VIDEO_DRIVER_RISCOS = false,
            .SDL_VIDEO_DRIVER_ROCKCHIP = false,
            .SDL_VIDEO_DRIVER_RPI = false,
            .SDL_VIDEO_DRIVER_UIKIT = false,
            .SDL_VIDEO_DRIVER_VITA = false,
            .SDL_VIDEO_DRIVER_VIVANTE = false,
            .SDL_VIDEO_DRIVER_VIVANTE_VDK = false,
            .SDL_VIDEO_DRIVER_OPENVR = false,
            .SDL_VIDEO_DRIVER_WAYLAND = false,
            .SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC = "",
            .SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_CURSOR = "",
            .SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_EGL = "",
            .SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_LIBDECOR = "",
            .SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_XKBCOMMON = "",
            .SDL_VIDEO_DRIVER_WINDOWS = windows,
            .SDL_VIDEO_DRIVER_X11 = false,
            .SDL_VIDEO_DRIVER_X11_DYNAMIC = "",
            .SDL_VIDEO_DRIVER_X11_DYNAMIC_XCURSOR = "",
            .SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT = "",
            .SDL_VIDEO_DRIVER_X11_DYNAMIC_XFIXES = "",
            .SDL_VIDEO_DRIVER_X11_DYNAMIC_XINPUT2 = "",
            .SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR = "",
            .SDL_VIDEO_DRIVER_X11_DYNAMIC_XSS = "",
            .SDL_VIDEO_DRIVER_X11_HAS_XKBLOOKUPKEYSYM = false,
            .SDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS = false,
            .SDL_VIDEO_DRIVER_X11_XCURSOR = false,
            .SDL_VIDEO_DRIVER_X11_XDBE = false,
            .SDL_VIDEO_DRIVER_X11_XFIXES = false,
            .SDL_VIDEO_DRIVER_X11_XINPUT2 = false,
            .SDL_VIDEO_DRIVER_X11_XINPUT2_SUPPORTS_MULTITOUCH = false,
            .SDL_VIDEO_DRIVER_X11_XRANDR = false,
            .SDL_VIDEO_DRIVER_X11_XSCRNSAVER = false,
            .SDL_VIDEO_DRIVER_X11_XSHAPE = false,
            .SDL_VIDEO_DRIVER_QNX = false,
            .SDL_VIDEO_RENDER_D3D = windows,
            .SDL_VIDEO_RENDER_D3D11 = windows,
            .SDL_VIDEO_RENDER_D3D12 = windows,
            .SDL_VIDEO_RENDER_GPU = windows,
            .SDL_VIDEO_RENDER_METAL = false,
            .SDL_VIDEO_RENDER_VULKAN = windows,
            .SDL_VIDEO_RENDER_OGL = windows,
            .SDL_VIDEO_RENDER_OGL_ES2 = windows,
            .SDL_VIDEO_RENDER_PS2 = false,
            .SDL_VIDEO_RENDER_PSP = false,
            .SDL_VIDEO_RENDER_VITA_GXM = false,
            .SDL_VIDEO_OPENGL = windows,
            .SDL_VIDEO_OPENGL_ES = false,
            .SDL_VIDEO_OPENGL_ES2 = windows,
            .SDL_VIDEO_OPENGL_BGL = false,
            .SDL_VIDEO_OPENGL_CGL = false,
            .SDL_VIDEO_OPENGL_GLX = false,
            .SDL_VIDEO_OPENGL_WGL = windows,
            .SDL_VIDEO_OPENGL_EGL = windows,
            .SDL_VIDEO_OPENGL_OSMESA = false,
            .SDL_VIDEO_OPENGL_OSMESA_DYNAMIC = "",
            .SDL_VIDEO_VULKAN = windows,
            .SDL_VIDEO_METAL = false,
            .SDL_GPU_D3D11 = windows,
            .SDL_GPU_D3D12 = windows,
            .SDL_GPU_VULKAN = windows,
            .SDL_GPU_METAL = false,
            .SDL_POWER_ANDROID = false,
            .SDL_POWER_LINUX = false,
            .SDL_POWER_WINDOWS = windows,
            .SDL_POWER_MACOSX = false,
            .SDL_POWER_UIKIT = false,
            .SDL_POWER_HAIKU = false,
            .SDL_POWER_EMSCRIPTEN = false,
            .SDL_POWER_HARDWIRED = false,
            .SDL_POWER_VITA = false,
            .SDL_POWER_PSP = false,
            .SDL_POWER_N3DS = false,
            .SDL_FILESYSTEM_ANDROID = false,
            .SDL_FILESYSTEM_HAIKU = false,
            .SDL_FILESYSTEM_COCOA = false,
            .SDL_FILESYSTEM_DUMMY = false,
            .SDL_FILESYSTEM_RISCOS = false,
            .SDL_FILESYSTEM_UNIX = false,
            .SDL_FILESYSTEM_WINDOWS = windows,
            .SDL_FILESYSTEM_EMSCRIPTEN = false,
            .SDL_FILESYSTEM_VITA = false,
            .SDL_FILESYSTEM_PSP = false,
            .SDL_FILESYSTEM_PS2 = false,
            .SDL_FILESYSTEM_N3DS = false,
            .SDL_STORAGE_GENERIC = windows,
            .SDL_STORAGE_STEAM = windows,
            .SDL_FSOPS_POSIX = false,
            .SDL_FSOPS_WINDOWS = windows,
            .SDL_FSOPS_DUMMY = false,
            .SDL_CAMERA_DRIVER_DUMMY = windows,
            .SDL_CAMERA_DRIVER_DISK = false,
            .SDL_CAMERA_DRIVER_V4L2 = false,
            .SDL_CAMERA_DRIVER_COREMEDIA = false,
            .SDL_CAMERA_DRIVER_ANDROID = false,
            .SDL_CAMERA_DRIVER_EMSCRIPTEN = false,
            .SDL_CAMERA_DRIVER_MEDIAFOUNDATION = windows,
            .SDL_CAMERA_DRIVER_PIPEWIRE = false,
            .SDL_CAMERA_DRIVER_PIPEWIRE_DYNAMIC = "",
            .SDL_CAMERA_DRIVER_VITA = false,
            .SDL_DIALOG_DUMMY = false,
            .SDL_MISC_DUMMY = false,
            .SDL_LOCALE_DUMMY = false,
            .SDL_ALTIVEC_BLITTERS = false,
            .DYNAPI_NEEDS_DLOPEN = false,
            .SDL_USE_IME = false,
            .SDL_IPHONE_KEYBOARD = false,
            .SDL_IPHONE_LAUNCHSCREEN = false,
            .SDL_VIDEO_VITA_PIB = false,
            .SDL_VIDEO_VITA_PVR = false,
            .SDL_VIDEO_VITA_PVR_OGL = false,
            .SDL_LIBDECOR_VERSION_MAJOR = null,
            .SDL_LIBDECOR_VERSION_MINOR = null,
            .SDL_LIBDECOR_VERSION_PATCH = null,
            .SDL_DISABLE_SSE = !(x86 and std.Target.x86.featureSetHas(cpu.features, .sse)),
            .SDL_DISABLE_SSE2 = !(x86 and std.Target.x86.featureSetHas(cpu.features, .sse2)),
            .SDL_DISABLE_SSE3 = !(x86 and std.Target.x86.featureSetHas(cpu.features, .sse3)),
            .SDL_DISABLE_SSE4_1 = !(x86 and std.Target.x86.featureSetHas(cpu.features, .sse4_1)),
            .SDL_DISABLE_SSE4_2 = !(x86 and std.Target.x86.featureSetHas(cpu.features, .sse4_2)),
            .SDL_DISABLE_AVX = !(x86 and std.Target.x86.featureSetHas(cpu.features, .avx)),
            .SDL_DISABLE_AVX2 = !(x86 and std.Target.x86.featureSetHas(cpu.features, .avx2)),
            .SDL_DISABLE_AVX512F = !(x86 and std.Target.x86.featureSetHas(cpu.features, .avx512f)),
            .SDL_DISABLE_MMX = !(x86 and std.Target.x86.featureSetHas(cpu.features, .mmx)),
            .SDL_DISABLE_LSX = !(loongarch and std.Target.loongarch.featureSetHas(cpu.features, .lsx)),
            .SDL_DISABLE_LASX = !(loongarch and std.Target.loongarch.featureSetHas(cpu.features, .lasx)),
            .SDL_DISABLE_NEON = !(arm and std.Target.arm.featureSetHas(cpu.features, .neon) or aarch64 and std.Target.aarch64.featureSetHas(cpu.features, .neon)),
        });
    };

    const revision_h = b.addConfigHeader(.{
        .style = .{ .cmake = b.path("include/build_config/SDL_revision.h.cmake") },
        .include_path = "SDL3/SDL_revision.h",
    }, .{
        .SDL_VENDOR_INFO = "https://github.com/castholm/SDL",
        .SDL_REVISION = std.fmt.comptimePrint("SDL-{}", .{version}),
    });

    const sdl_uclibc_lib = b.addStaticLibrary(.{
        .name = "SDL_uclib",
        .target = target,
        .optimize = optimize,
        .link_libc = true,
    });
    const sdl_uclibc_mod = &sdl_uclibc_lib.root_module;

    sdl_uclibc_mod.addCMacro("USING_GENERATED_CONFIG_H", "1");

    sdl_uclibc_mod.addConfigHeader(build_config_h);
    sdl_uclibc_mod.addConfigHeader(revision_h);
    sdl_uclibc_mod.addIncludePath(b.path("include"));
    sdl_uclibc_mod.addIncludePath(b.path("src"));

    sdl_uclibc_mod.addCSourceFiles(.{
        .flags = &common_c_flags,
        .files = &.{
            "src/libm/e_atan2.c",
            "src/libm/e_exp.c",
            "src/libm/e_fmod.c",
            "src/libm/e_log.c",
            "src/libm/e_log10.c",
            "src/libm/e_pow.c",
            "src/libm/e_rem_pio2.c",
            "src/libm/e_sqrt.c",
            "src/libm/k_cos.c",
            "src/libm/k_rem_pio2.c",
            "src/libm/k_sin.c",
            "src/libm/k_tan.c",
            "src/libm/s_atan.c",
            "src/libm/s_copysign.c",
            "src/libm/s_cos.c",
            "src/libm/s_fabs.c",
            "src/libm/s_floor.c",
            "src/libm/s_isinf.c",
            "src/libm/s_isinff.c",
            "src/libm/s_isnan.c",
            "src/libm/s_isnanf.c",
            "src/libm/s_modf.c",
            "src/libm/s_scalbn.c",
            "src/libm/s_sin.c",
            "src/libm/s_tan.c",
        },
    });

    const sdl_lib: *std.Build.Step.Compile = switch (link_mode) {
        inline else => |x| switch (x) {
            .static => std.Build.addStaticLibrary,
            .dynamic => std.Build.addSharedLibrary,
        }(b, .{
            .name = "SDL3",
            .version = version,
            .target = target,
            .optimize = optimize,
            .link_libc = true,
        }),
    };
    const sdl_mod = &sdl_lib.root_module;

    sdl_mod.addCMacro("USING_GENERATED_CONFIG_H", "1");
    sdl_mod.addCMacro("SDL_BUILD_MAJOR_VERSION", std.fmt.comptimePrint("{}", .{version.major}));
    sdl_mod.addCMacro("SDL_BUILD_MINOR_VERSION", std.fmt.comptimePrint("{}", .{version.minor}));
    sdl_mod.addCMacro("SDL_BUILD_MICRO_VERSION", std.fmt.comptimePrint("{}", .{version.patch}));
    switch (sdl_lib.linkage.?) {
        .static => {
            sdl_mod.addCMacro("SDL_STATIC_LIB", "1");
        },
        .dynamic => {
            sdl_mod.addCMacro("DLL_EXPORT", "1");
        },
    }

    sdl_mod.addConfigHeader(build_config_h);
    sdl_mod.addConfigHeader(revision_h);
    sdl_mod.addIncludePath(b.path("include"));
    sdl_mod.addIncludePath(b.path("src"));
    sdl_mod.addSystemIncludePath(b.path("src/video/khronos"));

    const sdl_c_flags = common_c_flags ++ .{
        "-std=c99",
    };
    sdl_mod.addCSourceFiles(.{
        .flags = &sdl_c_flags,
        .files = &.{
            "src/SDL.c",
            "src/SDL_assert.c",
            "src/SDL_error.c",
            "src/SDL_guid.c",
            "src/SDL_hashtable.c",
            "src/SDL_hints.c",
            "src/SDL_list.c",
            "src/SDL_log.c",
            "src/SDL_properties.c",
            "src/SDL_utils.c",
            "src/atomic/SDL_atomic.c",
            "src/atomic/SDL_spinlock.c",
            "src/audio/SDL_audio.c",
            "src/audio/SDL_audiocvt.c",
            "src/audio/SDL_audiodev.c",
            "src/audio/SDL_audioqueue.c",
            "src/audio/SDL_audioresample.c",
            "src/audio/SDL_audiotypecvt.c",
            "src/audio/SDL_mixer.c",
            "src/audio/SDL_wave.c",
            "src/camera/SDL_camera.c",
            "src/core/SDL_core_unsupported.c",
            "src/cpuinfo/SDL_cpuinfo.c",
            "src/dynapi/SDL_dynapi.c",
            "src/events/SDL_categories.c",
            "src/events/SDL_clipboardevents.c",
            "src/events/SDL_displayevents.c",
            "src/events/SDL_dropevents.c",
            "src/events/SDL_events.c",
            "src/events/SDL_keyboard.c",
            "src/events/SDL_keymap.c",
            "src/events/SDL_keysym_to_scancode.c",
            "src/events/SDL_mouse.c",
            "src/events/SDL_pen.c",
            "src/events/SDL_quit.c",
            "src/events/SDL_scancode_tables.c",
            "src/events/SDL_touch.c",
            "src/events/SDL_windowevents.c",
            "src/events/imKStoUCS.c",
            "src/file/SDL_iostream.c",
            "src/filesystem/SDL_filesystem.c",
            "src/gpu/SDL_gpu.c",
            "src/haptic/SDL_haptic.c",
            "src/hidapi/SDL_hidapi.c",
            "src/joystick/SDL_gamepad.c",
            "src/joystick/SDL_joystick.c",
            "src/joystick/SDL_steam_virtual_gamepad.c",
            "src/joystick/controller_type.c",
            "src/locale/SDL_locale.c",
            "src/main/SDL_main_callbacks.c",
            "src/main/SDL_runapp.c",
            "src/misc/SDL_url.c",
            "src/power/SDL_power.c",
            "src/process/SDL_process.c",
            "src/render/SDL_d3dmath.c",
            "src/render/SDL_render.c",
            "src/render/SDL_render_unsupported.c",
            "src/render/SDL_yuv_sw.c",
            "src/render/direct3d/SDL_render_d3d.c",
            "src/render/direct3d/SDL_shaders_d3d.c",
            "src/render/direct3d11/SDL_render_d3d11.c",
            "src/render/direct3d11/SDL_shaders_d3d11.c",
            "src/render/direct3d12/SDL_render_d3d12.c",
            "src/render/direct3d12/SDL_shaders_d3d12.c",
            "src/render/gpu/SDL_pipeline_gpu.c",
            "src/render/gpu/SDL_render_gpu.c",
            "src/render/gpu/SDL_shaders_gpu.c",
            "src/render/opengl/SDL_render_gl.c",
            "src/render/opengl/SDL_shaders_gl.c",
            "src/render/opengles2/SDL_render_gles2.c",
            "src/render/opengles2/SDL_shaders_gles2.c",
            "src/render/ps2/SDL_render_ps2.c",
            "src/render/psp/SDL_render_psp.c",
            "src/render/software/SDL_blendfillrect.c",
            "src/render/software/SDL_blendline.c",
            "src/render/software/SDL_blendpoint.c",
            "src/render/software/SDL_drawline.c",
            "src/render/software/SDL_drawpoint.c",
            "src/render/software/SDL_render_sw.c",
            "src/render/software/SDL_rotate.c",
            "src/render/software/SDL_triangle.c",
            "src/render/vitagxm/SDL_render_vita_gxm.c",
            "src/render/vitagxm/SDL_render_vita_gxm_memory.c",
            "src/render/vitagxm/SDL_render_vita_gxm_tools.c",
            "src/render/vulkan/SDL_render_vulkan.c",
            "src/render/vulkan/SDL_shaders_vulkan.c",
            "src/sensor/SDL_sensor.c",
            "src/stdlib/SDL_crc16.c",
            "src/stdlib/SDL_crc32.c",
            "src/stdlib/SDL_getenv.c",
            "src/stdlib/SDL_iconv.c",
            "src/stdlib/SDL_malloc.c",
            "src/stdlib/SDL_memcpy.c",
            "src/stdlib/SDL_memmove.c",
            "src/stdlib/SDL_memset.c",
            "src/stdlib/SDL_mslibc.c",
            "src/stdlib/SDL_murmur3.c",
            "src/stdlib/SDL_qsort.c",
            "src/stdlib/SDL_random.c",
            "src/stdlib/SDL_stdlib.c",
            "src/stdlib/SDL_string.c",
            "src/stdlib/SDL_strtokr.c",
            "src/storage/SDL_storage.c",
            "src/thread/SDL_thread.c",
            "src/time/SDL_time.c",
            "src/timer/SDL_timer.c",
            "src/video/SDL_RLEaccel.c",
            "src/video/SDL_blit.c",
            "src/video/SDL_blit_0.c",
            "src/video/SDL_blit_1.c",
            "src/video/SDL_blit_A.c",
            "src/video/SDL_blit_N.c",
            "src/video/SDL_blit_auto.c",
            "src/video/SDL_blit_copy.c",
            "src/video/SDL_blit_slow.c",
            "src/video/SDL_bmp.c",
            "src/video/SDL_clipboard.c",
            "src/video/SDL_egl.c",
            "src/video/SDL_fillrect.c",
            "src/video/SDL_pixels.c",
            "src/video/SDL_rect.c",
            "src/video/SDL_stretch.c",
            "src/video/SDL_surface.c",
            "src/video/SDL_video.c",
            "src/video/SDL_video_unsupported.c",
            "src/video/SDL_vulkan_utils.c",
            "src/video/SDL_yuv.c",
            "src/video/yuv2rgb/yuv_rgb_lsx.c",
            "src/video/yuv2rgb/yuv_rgb_sse.c",
            "src/video/yuv2rgb/yuv_rgb_std.c",
        },
    });
    if (windows) {
        sdl_mod.addCSourceFiles(.{
            .flags = &sdl_c_flags,
            .files = &.{
                "src/audio/dummy/SDL_dummyaudio.c",
                "src/audio/disk/SDL_diskaudio.c",
                "src/camera/dummy/SDL_camera_dummy.c",
                "src/joystick/virtual/SDL_virtualjoystick.c",
                "src/video/dummy/SDL_nullevents.c",
                "src/video/dummy/SDL_nullframebuffer.c",
                "src/video/dummy/SDL_nullvideo.c",
                "src/core/windows/SDL_hid.c",
                "src/core/windows/SDL_immdevice.c",
                "src/core/windows/SDL_windows.c",
                "src/core/windows/SDL_xinput.c",
                "src/core/windows/pch.c",
                "src/main/windows/SDL_sysmain_runapp.c",
                "src/misc/windows/SDL_sysurl.c",
                "src/audio/directsound/SDL_directsound.c",
                "src/audio/wasapi/SDL_wasapi.c",
                "src/audio/wasapi/SDL_wasapi_win32.c",
                "src/video/windows/SDL_windowsclipboard.c",
                "src/video/windows/SDL_windowsevents.c",
                "src/video/windows/SDL_windowsframebuffer.c",
                "src/video/windows/SDL_windowsgameinput.c",
                "src/video/windows/SDL_windowskeyboard.c",
                "src/video/windows/SDL_windowsmessagebox.c",
                "src/video/windows/SDL_windowsmodes.c",
                "src/video/windows/SDL_windowsmouse.c",
                "src/video/windows/SDL_windowsopengl.c",
                "src/video/windows/SDL_windowsopengles.c",
                "src/video/windows/SDL_windowsrawinput.c",
                "src/video/windows/SDL_windowsshape.c",
                "src/video/windows/SDL_windowsvideo.c",
                "src/video/windows/SDL_windowsvulkan.c",
                "src/video/windows/SDL_windowswindow.c",
                "src/thread/generic/SDL_syscond.c",
                "src/thread/generic/SDL_sysrwlock.c",
                "src/thread/windows/SDL_syscond_cv.c",
                "src/thread/windows/SDL_sysmutex.c",
                "src/thread/windows/SDL_sysrwlock_srw.c",
                "src/thread/windows/SDL_syssem.c",
                "src/thread/windows/SDL_systhread.c",
                "src/thread/windows/SDL_systls.c",
                "src/sensor/windows/SDL_windowssensor.c",
                "src/power/windows/SDL_syspower.c",
                "src/locale/windows/SDL_syslocale.c",
                "src/filesystem/windows/SDL_sysfilesystem.c",
                "src/filesystem/windows/SDL_sysfsops.c",
                "src/storage/generic/SDL_genericstorage.c",
                "src/storage/steam/SDL_steamstorage.c",
                "src/time/windows/SDL_systime.c",
                "src/timer/windows/SDL_systimer.c",
                "src/loadso/windows/SDL_sysloadso.c",
                "src/core/windows/SDL_hid.c",
                "src/core/windows/SDL_immdevice.c",
                "src/core/windows/SDL_windows.c",
                "src/core/windows/SDL_xinput.c",
                "src/core/windows/pch.c",
                "src/joystick/hidapi/SDL_hidapi_combined.c",
                "src/joystick/hidapi/SDL_hidapi_gamecube.c",
                "src/joystick/hidapi/SDL_hidapi_luna.c",
                "src/joystick/hidapi/SDL_hidapi_ps3.c",
                "src/joystick/hidapi/SDL_hidapi_ps4.c",
                "src/joystick/hidapi/SDL_hidapi_ps5.c",
                "src/joystick/hidapi/SDL_hidapi_rumble.c",
                "src/joystick/hidapi/SDL_hidapi_shield.c",
                "src/joystick/hidapi/SDL_hidapi_stadia.c",
                "src/joystick/hidapi/SDL_hidapi_steam.c",
                "src/joystick/hidapi/SDL_hidapi_steam_hori.c",
                "src/joystick/hidapi/SDL_hidapi_steamdeck.c",
                "src/joystick/hidapi/SDL_hidapi_switch.c",
                "src/joystick/hidapi/SDL_hidapi_wii.c",
                "src/joystick/hidapi/SDL_hidapi_xbox360.c",
                "src/joystick/hidapi/SDL_hidapi_xbox360w.c",
                "src/joystick/hidapi/SDL_hidapi_xboxone.c",
                "src/joystick/hidapi/SDL_hidapijoystick.c",
                "src/joystick/windows/SDL_dinputjoystick.c",
                "src/joystick/windows/SDL_rawinputjoystick.c",
                "src/joystick/windows/SDL_windows_gaming_input.c",
                "src/joystick/windows/SDL_windowsjoystick.c",
                "src/joystick/windows/SDL_xinputjoystick.c",
                "src/haptic/windows/SDL_dinputhaptic.c",
                "src/haptic/windows/SDL_windowshaptic.c",
                "src/camera/mediafoundation/SDL_camera_mediafoundation.c",
                "src/dialog/SDL_dialog_utils.c",
                "src/dialog/windows/SDL_windowsdialog.c",
                "src/process/windows/SDL_windowsprocess.c",
                "src/video/offscreen/SDL_offscreenevents.c",
                "src/video/offscreen/SDL_offscreenframebuffer.c",
                "src/video/offscreen/SDL_offscreenopengles.c",
                "src/video/offscreen/SDL_offscreenvideo.c",
                "src/video/offscreen/SDL_offscreenvulkan.c",
                "src/video/offscreen/SDL_offscreenwindow.c",
                "src/gpu/d3d11/SDL_gpu_d3d11.c",
                "src/gpu/d3d12/SDL_gpu_d3d12.c",
                "src/gpu/vulkan/SDL_gpu_vulkan.c",
                "src/main/generic/SDL_sysmain_callbacks.c",
            },
        });
        if (sdl_lib.linkage.? == .dynamic) {
            sdl_mod.addWin32ResourceFile(.{ .file = b.path("src/core/windows/version.rc") });
        }
    }

    if (sdl_lib.linkage.? == .dynamic) {
        sdl_lib.setVersionScript(b.path("src/dynapi/SDL_dynapi.sym"));
        sdl_lib.linker_allow_undefined_version = true;
    }

    sdl_mod.linkLibrary(sdl_uclibc_lib);
    if (windows) {
        sdl_mod.linkSystemLibrary("m", .{});
        sdl_mod.linkSystemLibrary("kernel32", .{});
        sdl_mod.linkSystemLibrary("user32", .{});
        sdl_mod.linkSystemLibrary("gdi32", .{});
        sdl_mod.linkSystemLibrary("winmm", .{});
        sdl_mod.linkSystemLibrary("imm32", .{});
        sdl_mod.linkSystemLibrary("ole32", .{});
        sdl_mod.linkSystemLibrary("oleaut32", .{});
        sdl_mod.linkSystemLibrary("version", .{});
        sdl_mod.linkSystemLibrary("uuid", .{});
        sdl_mod.linkSystemLibrary("advapi32", .{});
        sdl_mod.linkSystemLibrary("setupapi", .{});
        sdl_mod.linkSystemLibrary("shell32", .{});
        sdl_mod.linkSystemLibrary("dinput8", .{});
    }

    sdl_lib.installHeadersDirectory(b.path("include/SDL3"), "SDL3", .{
        .exclude_extensions = &.{
            "SDL_revision.h",
            "SDL_test.h",
            "SDL_test_assert.h",
            "SDL_test_common.h",
            "SDL_test_compare.h",
            "SDL_test_crc32.h",
            "SDL_test_font.h",
            "SDL_test_fuzzer.h",
            "SDL_test_harness.h",
            "SDL_test_log.h",
            "SDL_test_md5.h",
            "SDL_test_memory.h",
        },
    });
    sdl_lib.installConfigHeader(revision_h);
    if (install_build_config_h) {
        sdl_lib.installConfigHeader(build_config_h);
    }

    const install_sdl_lib = b.addInstallArtifact(sdl_lib, .{
        // Zig 0.12.1 compat
        .dest_dir = if (sdl_lib.producesImplib()) .{ .override = .bin } else .default,
        .implib_dir = if (sdl_lib.producesImplib()) .{ .override = .lib } else .default,
    });

    const install_sdl = b.step("install_sdl", "Install SDL");
    install_sdl.dependOn(&install_sdl_lib.step);

    b.getInstallStep().dependOn(&install_sdl_lib.step);

    const sdl_test_lib = b.addStaticLibrary(.{
        .name = "SDL3_test",
        .target = target,
        .optimize = optimize,
        .link_libc = true,
    });
    const sdl_test_mod = &sdl_test_lib.root_module;

    sdl_test_mod.addConfigHeader(build_config_h);
    sdl_test_mod.addConfigHeader(revision_h);
    sdl_test_mod.addIncludePath(b.path("include"));

    sdl_test_mod.addCSourceFiles(.{
        .flags = &common_c_flags,
        .files = &.{
            "src/test/SDL_test_assert.c",
            "src/test/SDL_test_common.c",
            "src/test/SDL_test_compare.c",
            "src/test/SDL_test_crc32.c",
            "src/test/SDL_test_font.c",
            "src/test/SDL_test_fuzzer.c",
            "src/test/SDL_test_harness.c",
            "src/test/SDL_test_log.c",
            "src/test/SDL_test_md5.c",
            "src/test/SDL_test_memory.c",
        },
    });

    sdl_test_lib.installHeadersDirectory(b.path("include/SDL3"), "SDL3", .{
        .include_extensions = &.{
            "SDL_test.h",
            "SDL_test_assert.h",
            "SDL_test_common.h",
            "SDL_test_compare.h",
            "SDL_test_crc32.h",
            "SDL_test_font.h",
            "SDL_test_fuzzer.h",
            "SDL_test_harness.h",
            "SDL_test_log.h",
            "SDL_test_md5.h",
            "SDL_test_memory.h",
        },
    });

    const install_sdl_test_lib = b.addInstallArtifact(sdl_test_lib, .{});

    const install_sdl_test = b.step("install_sdl_test", "Install SDL_test");
    install_sdl_test.dependOn(&install_sdl_test_lib.step);

    b.getInstallStep().dependOn(&install_sdl_test_lib.step);
}

const common_c_flags = .{
    "-Wall",
    "-Wundef",
    "-Wfloat-conversion",
    "-fno-strict-aliasing",
    "-Wshadow",
    "-Wno-unused-local-typedefs",
    "-Wimplicit-fallthrough",
};
